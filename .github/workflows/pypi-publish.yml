# .github/workflows/pypi-publish.yml
name: Build, and Publish MongoDesu Python Package
on:
    push:
        branches:
            - master
permissions:
  contents: write
jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    outputs:
        exists: ${{ steps.check_version.outputs.exists }}
        version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Get version from setup.py
      id: get_version
      run: >-
          VERSION=$(python3 setup.py --version)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
    - name: Check if version already exist
      id: check_version
      run: >-
            if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
                echo "exists=true" >> $GITHUB_OUTPUT
            else
                echo "exists=false" >> $GITHUB_OUTPUT
            fi
      env:
        VERSION: ${{ env.VERSION }}
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs: build
    if: needs.build.outputs.exists == 'false'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mongodesu  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
    - name: Get version from setup.py
      id: get_version
      run: echo "version=$(python setup.py --version)" >> $GITHUB_OUTPUT
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    - name: Create tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        if git rev-parse "v${{ needs.build.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping."
        else
            git tag v${{ needs.build.outputs.version }}
            git push origin v${{ needs.build.outputs.version }}
        fi
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: Release v${{ needs.build.outputs.version }}
        draft: false
        prerelease: false
        body: |
          Automatically generated release for version v${{ needs.build.outputs.version }}